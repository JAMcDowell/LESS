function [NeapsAccess,...
          NumberDaysRequiredOnSite,...
          NumberStandbyDaysBetweenAccessPeriods]...
               = neapaccess(DateTime_UTC,...
                            Flow_Vel_Abs_Surf_ms,...
                            LightRatio,...
                            NeapPeriod_DesignatedInterval_D,...
                            NeapPeriod_DesignatedDuration_D,...
                            AccessLimit_Flow_Vel_Abs_Surf_ms,...
                            Operation_OnSiteDuration_h)
%% Inputs Description
% DateTime_UTC [tx1]

% Flow_Vel_Abs_Surf_ms [tx1]

% LightRatio [tx1]

% NeapPeriod_DesignatedInterval_D [1x1] - Typically set to 14 days.

% NeapPeriod_DesignatedDuration_D [1x1] - Typically set to 7 days.

% Operation_AccessLimit_Flow_Vel_Abs_Surf_ms [1x1]

% Operation_IdealDuration_h [1x1]

%% Outputs Description
% NeapsAccess [Struct]

% NumberDaysRequiredOnSite

% NumberStandbyDaysBetweenAccessPeriods

%% Input Checks
% Class Checks
if isdatetime(DateTime_UTC)
    if ~size(unique(diff(DateTime_UTC)),2) == 1 ...
    || ~issorted(DateTime_UTC,'ascend')
        error('"DateTime_UTC" variable does not increase uniformly. Check for duplicate or anomalous entries.')
    end
    
else
    error('Check that the "DateTime_UTC" specified is of class "datetime".');
    
end

% Attribute Checks
validateattributes(Flow_Vel_Abs_Surf_ms,...
                    {'numeric'},...
                    {'column','nonempty','nonnegative'});
                
validateattributes(LightRatio,...
                    {'numeric'},...
                    {'column','nonempty','nonnegative'});
                    
validateattributes(NeapPeriod_DesignatedInterval_D,...
                   {'numeric'},...
                   {'scalar','nonempty','positive'});                
               
validateattributes(NeapPeriod_DesignatedDuration_D,...
                   {'numeric'},...
                   {'scalar','nonempty','positive'});                

validateattributes(AccessLimit_Flow_Vel_Abs_Surf_ms,...
                   {'numeric'},...
                   {'scalar','nonempty','positive'});

validateattributes(Operation_OnSiteDuration_h,...
                   {'numeric'},...
                   {'scalar','nonempty','positive'});                  

% Size Checks
if ~isequal(size(DateTime_UTC,1),...
            size(Flow_Vel_Abs_Surf_ms,1),...
            size(LightRatio,1))
    error('"DateTime_UTC","Flow_Vel_Abs_Surf_ms" and "LightRatio" must have the same number of rows.');
    
end
        
%% Create TimeTable
TT.Flow_Vel_Abs_Surf_ms...
    = timetable(DateTime_UTC,...
                Flow_Vel_Abs_Surf_ms,...
                'VariableNames',{'Flow_Vel_Abs_Surf_ms'});

TT.Hourly_Flow_Vel_Abs_Surf_ms...
    = retime(TT.Flow_Vel_Abs_Surf_ms,...
            'hourly','mean');            
               
TT.DailyMean_Flow_Vel_Abs_Surf_ms...
    = retime(TT.Hourly_Flow_Vel_Abs_Surf_ms,...
            'daily','mean');

%% Identify Month        
NeapsAccess.Month = monthnum2name(mode(month(DateTime_UTC)),'Short');  

%% Find Neapiest Neaps
[~, NN_Index] = findpeaks(-TT.Hourly_Flow_Vel_Abs_Surf_ms.Flow_Vel_Abs_Surf_ms,...
                          'MinPeakDistance',...
                          (NeapPeriod_DesignatedInterval_D - 1) * 24);       

NeapsAccess.NeapiestNeaps = TT.Hourly_Flow_Vel_Abs_Surf_ms(NN_Index,:);

%% Neap Periods
NeapsAccess.NeapPeriods = TT.Hourly_Flow_Vel_Abs_Surf_ms...
    (DateTime_UTC >= (NeapsAccess.NeapiestNeaps.DateTime_UTC(1) - hours(NeapPeriod_DesignatedDuration_D/2*24)) ...
   & DateTime_UTC <= (NeapsAccess.NeapiestNeaps.DateTime_UTC(1) + hours(NeapPeriod_DesignatedDuration_D/2*24)),:);           
                
for n = 2:size(NeapsAccess.NeapiestNeaps,1)
    NeapPeriods_Temp = TT.Hourly_Flow_Vel_Abs_Surf_ms...
        (DateTime_UTC >= (NeapsAccess.NeapiestNeaps.DateTime_UTC(n) - hours(NeapPeriod_DesignatedDuration_D/2*24)) ...
       & DateTime_UTC <= (NeapsAccess.NeapiestNeaps.DateTime_UTC(n) + hours(NeapPeriod_DesignatedDuration_D/2*24)),:);   
   
    NeapsAccess.NeapPeriods = [NeapsAccess.NeapPeriods;NeapPeriods_Temp];
    
end

NeapsAccess.NeapPeriods = retime(NeapsAccess.NeapPeriods,...
                       DateTime_UTC);                    

NeapsAccess.NeapPeriods.Hours = ones(size(NeapsAccess.NeapPeriods,1),1);
NeapsAccess.NeapPeriods.Hours(isnan(NeapsAccess.NeapPeriods.Flow_Vel_Abs_Surf_ms)) = NaN;
                   
% Total Hours within Neap Periods
NeapsAccess.SumAllNeapHours = sum(NeapsAccess.NeapPeriods.Hours,'omitnan');

%% Total Hours within Neap < Threshold
NeapsAccess.NeapPeriods_BelowThreshold = NeapsAccess.NeapPeriods...
    (NeapsAccess.NeapPeriods.Flow_Vel_Abs_Surf_ms < AccessLimit_Flow_Vel_Abs_Surf_ms,:);

NeapsAccess.NeapPeriods_BelowThreshold...
    = retime(NeapsAccess.NeapPeriods_BelowThreshold,...
             DateTime_UTC);  

% Total Hours within Neap < Threshold
NeapsAccess.SumNeapHoursBelowThreshold...
    = sum(NeapsAccess.NeapPeriods_BelowThreshold.Hours,'omitnan');

%% Neap Hours During Daylight
NeapsAccess.NeapPeriods_Daylight...
    = NeapsAccess.NeapPeriods;

NeapsAccess.NeapPeriods_Daylight.Hours(~isnan(NeapsAccess.NeapPeriods_Daylight.Flow_Vel_Abs_Surf_ms))...
    = LightRatio(~isnan(NeapsAccess.NeapPeriods_Daylight.Flow_Vel_Abs_Surf_ms));

% Total Hours within Neap During Daylight 
NeapsAccess.SumNeapHoursDuringDaylight...
    = sum(NeapsAccess.NeapPeriods_Daylight.Hours,'omitnan');     
    
%% Access Hours (Neap Hours during daylight & below threshold)
NeapsAccess.NeapPeriods_AccessHours = NeapsAccess.NeapPeriods_Daylight...
    (NeapsAccess.NeapPeriods_Daylight.Flow_Vel_Abs_Surf_ms < AccessLimit_Flow_Vel_Abs_Surf_ms,:);

NeapsAccess.NeapPeriods_AccessHours...
    = retime(NeapsAccess.NeapPeriods_AccessHours,...
             DateTime_UTC);  

% Total Neap Hours During Daylight < Threshold
NeapsAccess.SumNeapAccessHours...
    = round2(sum(NeapsAccess.NeapPeriods_AccessHours.Hours,'omitnan'),1);

%% Days Required for Operations
% Cumulative Access Hours
NeapsAccess.NeapPeriods_AccessHours.CumSumHours...
    = cumsum(NeapsAccess.NeapPeriods_AccessHours.Hours,'omitnan');

% Total Hours Required On Site (should approximately match the "Operation_IdealDuration_h" input)
NeapsAccess.TotalHoursRequiredOnSite...
    = sum(NeapsAccess.NeapPeriods_AccessHours.Hours...
         (NeapsAccess.NeapPeriods_AccessHours.CumSumHours > 0 ...
        & NeapsAccess.NeapPeriods_AccessHours.CumSumHours <= Operation_OnSiteDuration_h),'omitnan');

% Index of days within each month
NeapsAccess.IndexOfDaysRequiredOnSite...
    = day(NeapsAccess.NeapPeriods_AccessHours.DateTime_UTC...
         (NeapsAccess.NeapPeriods_AccessHours.CumSumHours > 0 ...
        & NeapsAccess.NeapPeriods_AccessHours.CumSumHours <= Operation_OnSiteDuration_h  ...
 & ~isnan(NeapsAccess.NeapPeriods_AccessHours.Hours)));                                        
      
% Number Days Required on Site (to complete operation)
NeapsAccess.NumberDaysRequiredOnSite = size(unique(NeapsAccess.IndexOfDaysRequiredOnSite),1);                                     
          
% Number Days Required for Successful Operation (including waiting for next neap period)
NeapsAccess.NumberDaysRequiredForSuccessfulOperation...
    = max(NeapsAccess.IndexOfDaysRequiredOnSite)...
    - min(NeapsAccess.IndexOfDaysRequiredOnSite)...
    + 1;

% Standby Days between Neaps (this should apporximately match the "NeapPeriod_DesignatedInterval_D" input)     
NeapsAccess.NumberStandbyDaysBetweenAccessPeriods...
    = NeapsAccess.NumberDaysRequiredForSuccessfulOperation...
    - NeapsAccess.NumberDaysRequiredOnSite;

%% Output Variables
NumberDaysRequiredOnSite...
    = NeapsAccess.NumberDaysRequiredOnSite;

NumberStandbyDaysBetweenAccessPeriods...
    = NeapsAccess.NumberStandbyDaysBetweenAccessPeriods;

end