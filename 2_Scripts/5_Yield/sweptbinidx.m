function [Hub_BinIdx,...
          TipTop_BinIdx,...
          TipBot_BinIdx] = sweptbinidx(DepthBins_FrmBedorSurf_m,...
                                       BinSize_m,...
                                       RotorRadius_m,...
                                       Hub2BoundaryDist_m,...
                                       BoundaryType)
%% Function Description
%

%% Inputs Description
% DepthBins_FrmBedorSurf_m

% BinSize_m

% RotorRadius_m

% Hub2BoundaryDist_m

% BoundaryType

%% Outputs Description
% Hub_BinIdx

% TipTop_BinIdx

% TipBot_BinIdx

%% Input Checks
validateattributes(DepthBins_FrmBedorSurf_m,...
    {'numeric'},{'2d','nonempty'}); 

validateattributes(BinSize_m,...
    {'numeric'},{'scalar','positive','nonnan'}); 

validateattributes(RotorRadius_m,...
    {'numeric'},{'scalar','positive','nonnan'}); 

validateattributes(Hub2BoundaryDist_m,...
    {'numeric'},{'scalar','nonnegative','nonnan'}); 

BoundaryType = validatestring(BoundaryType,{'Bed','Surface'});

%% Calculate Swept Bin Indexes
if strcmp(BoundaryType,'Bed')
    Hub_BinIdx...
        = find(DepthBins_FrmBedorSurf_m(1,:)...
        == DepthBins_FrmBedorSurf_m(1,...
        size(0:BinSize_m:round2(Hub2BoundaryDist_m,BinSize_m),2)));
    
    TipTop_BinIdx...
        = find(DepthBins_FrmBedorSurf_m(1,:)...
        == DepthBins_FrmBedorSurf_m(1,...
        size(0:BinSize_m:round2(Hub2BoundaryDist_m + RotorRadius_m,BinSize_m),2)));
    
    TipBot_BinIdx...
        = find(DepthBins_FrmBedorSurf_m(1,:)...
        == DepthBins_FrmBedorSurf_m(1,...
        size(0:BinSize_m:round2(Hub2BoundaryDist_m - RotorRadius_m,BinSize_m),2)));
    
elseif strcmp(BoundaryType,'Surface')
    Hub_BinIdx...
        = find(DepthBins_FrmBedorSurf_m(1,:)...
        == DepthBins_FrmBedorSurf_m(1,...
        end-size(0:BinSize_m:round2(Hub2BoundaryDist_m,BinSize_m),2)+1));
    
    TipBot_BinIdx...
        = find(DepthBins_FrmBedorSurf_m(1,:)...
        == DepthBins_FrmBedorSurf_m(1,...
        end-size(0:BinSize_m:round2(Hub2BoundaryDist_m + RotorRadius_m,BinSize_m),2)+1));
    
    TipTop_BinIdx...
        = find(DepthBins_FrmBedorSurf_m(1,:)...
        == DepthBins_FrmBedorSurf_m(1,...
        end-size(0:BinSize_m:round2(Hub2BoundaryDist_m - RotorRadius_m,BinSize_m),2)+1));
    
else
    error('"BoundaryType" must be designated by the user as "Bed" or "Surface". Check "Devices" inputs.');
    
end

end