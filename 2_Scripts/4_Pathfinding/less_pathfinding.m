function [PATHFIND] = less_pathfinding(METOCEAN, SCENARIO, SITES, IN)
%% Function Description - less_pathfinding - JAM - 01/11/20
% This function finds paths between Sites and Ports, to be used for the 
% calculation of tranmission and transit distances.

%% Inputs Description
% METOCEAN
% SCENARIO
% SITES
% IN

%% Outputs Description
% PATHFIND

%% DISCRETE Pathfinding Only (Euclidean Distance between Site & Ports)
if IN.RUN.DISCRETE && ~IN.RUN.SPATIAL 
    warning('A* shortest path calculation will not be performed for DISCRETE simulation as no SPATIAL gridded bathymetry data has been designated by the user.');
    disp('Utilising Euclidean distances between DISCRETE Sites & Ports for both Transmission & Operations...');
    
    for s = 1:size(SITES,2)                                                 % For each site...
        %% Transmission Site -> Port Euclidean Distance
        PATHFIND.DISCRETE.SITES(s).Name = SITES(s).Name;                    % Extract Site name.
        [PATHFIND.DISCRETE.SITES(s).TRANSMISSION.Path2SuitableValidPort_EuclidDistance_m, TIdx]...
            = min([SITES(s).PORTS(:).Path2SuitableValidPort_EuclidDistance_m]);
        PATHFIND.DISCRETE.SITES(s).TRANSMISSION.NearestSuitableValidPort...
            = SITES(s).PORTS(TIdx).Name;

        %% Vessel Specific Site -> Port Euclidean Distance
        for v = 1:size(SCENARIO.Vessels.Vessels_WorkingLimits,1)            % For each Vessel...
            PATHFIND.DISCRETE.SITES(s).VESSELS(v).Name...                   % Extract Vessel Name.
                = SCENARIO.Vessels.Vessels_WorkingLimits.Vessels_Name{v};
            PATHFIND.DISCRETE.SITES(s).VESSELS(v).Vessels_SizeClassification...    % Extract required Port size.
                = SCENARIO.Vessels.Vessels_SizeClassifications.Ports_SizeClassification{v};

             % Vessel Specific Euclidean Distance (for Comparison)
             switch PATHFIND.DISCRETE.VESSELS(v).Vessels_SizeClassification
                 case 'Small'                                            % Vessel requires at least Small Ports.
                     SP = ismember(SCENARIO.Ports.Ports_SizeClassification.Ports_SizeClassification,...
                         {'Small','Medium','Large'});
                     [PATHFIND.DISCRETE.SITES(s).VESSELS(v).Path2SuitableValidPort_EuclidDistance_m, SIdx]...
                         = min([SITES(s).PORTS(SP).Site2Port_EuclideanDistance_m]);
                     Temp = {SITES(s).PORTS(SP).Name};
                     PATHFIND.DISCRETE.SITES(s).VESSELS(v).NearestSuitableValidPort_Euclid...
                         = Temp{SIdx};
                     
                 case 'Medium'                                             % Vessel requires at least Medium Ports.
                     MP = ismember(SCENARIO.Ports.Ports_SizeClassification.Ports_SizeClassification,...
                         {'Medium','Large'});
                     [PATHFIND.DISCRETE.SITES(s).VESSELS(v).Path2SuitableValidPort_EuclidDistance_m, MIdx]...
                         = min([SITES(s).PORTS(MP).Site2Port_EuclideanDistance_m]);
                     Temp = {SITES(s).PORTS(MP).Name};
                     PATHFIND.DISCRETE.SITES(s).VESSELS(v).NearestSuitableValidPort_Euclid...
                         = Temp{MIdx};
                     
                 case 'Large'
                     LP = ismember(SCENARIO.Ports.Ports_SizeClassification.Ports_SizeClassification,...
                         {'Large'});
                     [PATHFIND.DISCRETE.SITES(s).VESSELS(v).Path2SuitableValidPort_EuclidDistance_m, LIdx]...
                         = min([SITES(s).PORTS(LP).Site2Port_EuclideanDistance_m]);
                     Temp = {SITES(s).PORTS(LP).Name};
                     PATHFIND.DISCRETE.SITES(s).VESSELS(v).NearestSuitableValidPort_Euclid...
                         = Temp{LIdx};
                     
                 otherwise
                     error('Ports_SizeClassification must be specifed as "Small", "Medium" or "Large"!');
             end
        end
    end 
    
    % Finalise Section
    disp(' % All DISCRETE Site to Port distances calculated successfully.'); 
end

%% SPATIAL Pathfinding (A* Algorithm)
if IN.RUN.SPATIAL
    disp('Calculating A* shortest paths for all SPATIAL grid points...');
    
    %% Identify Grid Cell Size
    GridCellSize = unique(diff(METOCEAN.SPATIAL.UTM_E_m,[],1));
    GridCellSize = GridCellSize(~isnan(GridCellSize));
    
    %% Create Linear Index Matrix Map (for reference)    
    PATHFIND.MAPS.LinearIndexMap...
        = 1:(size(METOCEAN.SPATIAL.ChartDatum_Z_m,1)...
           * size(METOCEAN.SPATIAL.ChartDatum_Z_m,2)); 
    
    PATHFIND.MAPS.LinearIndexMap...
        = reshape(PATHFIND.MAPS.LinearIndexMap,...
                  size(METOCEAN.SPATIAL.ChartDatum_Z_m));
     
    %% Binary & Weighted Mobility Maps
    disp(' - Generating Mobility maps...')
    PATHFIND.MAPS.BinaryMobilityMap...                                      % Preallocate memory.
        = zeros(size(METOCEAN.SPATIAL.ChartDatum_Z_m)); 
    PATHFIND.MAPS.BinaryMobilityMap...                                      % For binary mobility, 0 indicates a valid node, 1 cannot be transitioned through. 
        (isnan(METOCEAN.SPATIAL.ChartDatum_Z_m)) = 1;                                                                
    PATHFIND.MAPS.WeightedMobilityMap...                                    % For bathymetry, set as 'min' to normalise the mobility to be highest through the shallows, or 'max' to have highest mobility through deep water.
        = mobilitymap(METOCEAN.SPATIAL.ChartDatum_Z_m,'min'); 

    %% Generate Land Boundary Goal Register Map (for transmission cable landfall) 
    PATHFIND.MAPS.LandBoundary_GoalRegister...
        = double(edge(logical(PATHFIND.MAPS.BinaryMobilityMap),'Roberts'));
    
    %% Calculate Site & Port Valid Grid Positions
    disp(' - Mapping Sites & Ports to nearest valid grid positions...');
    
    for s = 1:size(SITES,2)                                                 % For each site...
        %% Site Positions
        % Site Name
        PATHFIND.SPATIAL.SITES(s).Sites_Name = SITES(s).Name; 
        
        % Linear Indexes
        PATHFIND.SPATIAL.SITES(s).ValidGridPosition_LinearIndex...          % GridData to find Linear Index of Valid Grid Position of Site
            = griddata(double(METOCEAN.SPATIAL.UTM_E_m(~isnan(METOCEAN.SPATIAL.UTM_E_m))),...
                       double(METOCEAN.SPATIAL.UTM_N_m(~isnan(METOCEAN.SPATIAL.UTM_E_m))),...
                       PATHFIND.MAPS.LinearIndexMap(~isnan(METOCEAN.SPATIAL.UTM_E_m)),...
                       SITES(s).Imposed_UTM_E_m,...
                       SITES(s).Imposed_UTM_N_m,...
                       'nearest');

        % Subscript Indexes           
        [row,col] = ind2sub(size(METOCEAN.SPATIAL.ChartDatum_Z_m),...       % Convert Valid Linear Index to Subscript Index (m,n) 
                            PATHFIND.SPATIAL.SITES(s).ValidGridPosition_LinearIndex);
        PATHFIND.SPATIAL.SITES(s).ValidGridPosition_SubscriptIndex_mn...
            = [row, col]; 
        
        % UTM Positions
        PATHFIND.SPATIAL.SITES(s).ValidGridPosition_UTM_E_m...
            = METOCEAN.SPATIAL.UTM_E_m(row, col);   
        PATHFIND.SPATIAL.SITES(s).ValidGridPosition_UTM_N_m...
            = METOCEAN.SPATIAL.UTM_N_m(row, col);             
  
        % Euclidean Distance
        PATHFIND.SPATIAL.SITES(s).EuclidDistance2InputPosition_m...          % Calculate Distance between Input Site Position & Valid Site Position.
            = utmeuclideandist(SITES(s).Imposed_UTM_E_m,...
                               SITES(s).Imposed_UTM_N_m,...
                               SITES(s).Imposed_UTM_Zone,...
                               SITES(s).Imposed_UTM_Hemi,...
                               PATHFIND.SPATIAL.SITES(s).ValidGridPosition_UTM_E_m,...
                               PATHFIND.SPATIAL.SITES(s).ValidGridPosition_UTM_N_m,...
                               SCENARIO.Region.Region_UTM.Region_UTM_Zone(1),...
                               SCENARIO.Region.Region_UTM.Region_UTM_Hemi{1}); 
        % Depth
        PATHFIND.SPATIAL.SITES(s).Depth_m...                                % Display Site Depth (for reference, ensure not NaN)
            = METOCEAN.SPATIAL.ChartDatum_Z_m(row, col);

        %% Port Positions
        for p = 1:size(SITES(s).PORTS,2)                                    % For each port...               
            PATHFIND.SPATIAL.PORTS(p).Ports_Name = SITES(s).PORTS(p).Name;  % Extract Port name.
                 
            PATHFIND.SPATIAL.PORTS(p).Ports_SizeClassification...           % Extract Port size.
                = SITES(s).PORTS(p).Ports_SizeClassification;
            
            PATHFIND.SPATIAL.PORTS(p).ValidGridPosition_LinearIndex...      % GridData to find Linear Index of Valid Grid Position of Port.
                = griddata(double(METOCEAN.SPATIAL.UTM_E_m(~isnan(METOCEAN.SPATIAL.UTM_E_m))),...
                           double(METOCEAN.SPATIAL.UTM_N_m(~isnan(METOCEAN.SPATIAL.UTM_E_m))),...
                           PATHFIND.MAPS.LinearIndexMap(~isnan(METOCEAN.SPATIAL.UTM_E_m)),...
                           SITES(s).PORTS(p).Imposed_UTM_E_m,...
                           SITES(s).PORTS(p).Imposed_UTM_N_m,...
                           'nearest'); 
       
            [row,col] = ind2sub(size(METOCEAN.SPATIAL.ChartDatum_Z_m),...   % Convert Valid Linear Index to Subscript Index (m,n).
                                PATHFIND.SPATIAL.PORTS(p).ValidGridPosition_LinearIndex);

            PATHFIND.SPATIAL.PORTS(p).ValidGridPosition_SubscriptIndex_mn...
                = [row, col]; 

            PATHFIND.SPATIAL.PORTS(p).ValidGridPosition_UTM_E_m...
                = METOCEAN.SPATIAL.UTM_E_m(row, col); 
            
            PATHFIND.SPATIAL.PORTS(p).ValidGridPosition_UTM_N_m...
                = METOCEAN.SPATIAL.UTM_N_m(row, col);
            
            PATHFIND.SPATIAL.PORTS(p).EuclidDistance2InputPosition_m...      % Calculate Distance between Input Port and Valid Port Position
                = utmeuclideandist(SITES(s).PORTS(p).Imposed_UTM_E_m,...
                                   SITES(s).PORTS(p).Imposed_UTM_N_m,...
                                   SITES(s).PORTS(p).Imposed_UTM_Zone,...
                                   SITES(s).PORTS(p).Imposed_UTM_Hemi,...
                                   PATHFIND.SPATIAL.PORTS(p).ValidGridPosition_UTM_E_m,...
                                   PATHFIND.SPATIAL.PORTS(p).ValidGridPosition_UTM_N_m,...
                                   SCENARIO.Region.Region_UTM.Region_UTM_Zone(1),...
                                   SCENARIO.Region.Region_UTM.Region_UTM_Hemi{1});
     
            PATHFIND.SPATIAL.PORTS(p).PortDepth_m...                        % Display Port Depth (for reference, ensure not NaN)
                = METOCEAN.SPATIAL.ChartDatum_Z_m(row, col);
            
        end
    end
        
    %% Generate All Valid Ports Goal Register Map
    PATHFIND.MAPS.ValidPort_GoalRegister...                                 % Preallocate memory.
        = single(zeros(size(METOCEAN.SPATIAL.ChartDatum_Z_m))); 
    TP = vertcat(PATHFIND.SPATIAL.PORTS(ismember(SCENARIO.Ports.Ports_SizeClassification.Ports_SizeClassification,...
                 {'Small','Medium','Large'})).ValidGridPosition_SubscriptIndex_mn);  

    for tp = 1:size(TP,1)
        PATHFIND.MAPS.ValidPort_GoalRegister...
            (TP(tp,1),TP(tp,2)) = 1;
    end

    %% Preallocate Large Arrays for Transmission Distances
    disp(' - Preallocating memory for the population of large arrays...');
    
    % Node Path (Part 1)
    PATHFIND.SPATIAL.TRANSMISSION.AStar_OptimalPath2LandFall_mn...        
        = (single(~PATHFIND.MAPS.BinaryMobilityMap));
    PATHFIND.SPATIAL.TRANSMISSION.AStar_OptimalPath2LandFall_mn...
        (PATHFIND.MAPS.BinaryMobilityMap == 1)...
        = NaN;
    
    % Grid Cell Size
    PATHFIND.SPATIAL.TRANSMISSION.GridCellSize_m = GridCellSize;
    
    % A* Distance
    PATHFIND.SPATIAL.TRANSMISSION.Path2LandFall_AStarDistance_m...
        = PATHFIND.SPATIAL.TRANSMISSION.AStar_OptimalPath2LandFall_mn;
    
    % Euclidean Distance
    PATHFIND.SPATIAL.TRANSMISSION.Path2LandFall_EuclidDistance_m...
       = PATHFIND.SPATIAL.TRANSMISSION.AStar_OptimalPath2LandFall_mn;
    
    % Node Path (Part 2)
    PATHFIND.SPATIAL.TRANSMISSION.AStar_OptimalPath2LandFall_mn...
        = num2cell(PATHFIND.SPATIAL.TRANSMISSION.AStar_OptimalPath2LandFall_mn);
    PATHFIND.SPATIAL.TRANSMISSION.AStar_OptimalPath2LandFall_mn...
        (PATHFIND.MAPS.BinaryMobilityMap == 0) = {[]}; 
        
    %% Preallocate Large Arrays for Operations Distances
    for v = 1:size(SCENARIO.Vessels.Vessels_WorkingLimits,1)                % For each Vessel...    
        % Vessel Name
        PATHFIND.SPATIAL.VESSELS(v).Vessels_Name...
            = SCENARIO.Vessels.Vessels_WorkingLimits.Vessels_Name{v};
         
        % Required Port Size
        PATHFIND.SPATIAL.VESSELS(v).Vessels_SizeClassification...
            = SCENARIO.Vessels.Vessels_SizeClassification.Vessels_SizeClassification{v};
         
        % Goal Register
        PATHFIND.SPATIAL.VESSELS(v).SuitableValidPort_GoalRegister...        % Preallocate empty port goal register.
            = single(zeros(size(METOCEAN.SPATIAL.ChartDatum_Z_m)));
         
        switch PATHFIND.SPATIAL.VESSELS(v).Vessels_SizeClassification
             case 'Small'                                                    % Vessel requires at least Small Ports.
                 SP = vertcat(PATHFIND.SPATIAL.PORTS(ismember(SCENARIO.Ports.Ports_SizeClassification.Ports_SizeClassification,...
                     {'Small','Medium','Large'})).ValidGridPosition_SubscriptIndex_mn);
                 for sp = 1:size(SP,1)
                     PATHFIND.SPATIAL.VESSELS(v).SuitableValidPort_GoalRegister...
                         (SP(sp,1),SP(sp,2)) = 1;
                 end
                 
             case 'Medium'                                                   % Vessel requires at least Medium Ports.
                 MP = vertcat(PATHFIND.SPATIAL.PORTS(ismember(SCENARIO.Ports.Ports_SizeClassification.Ports_SizeClassification,...
                     {'Medium','Large'})).ValidGridPosition_SubscriptIndex_mn);
                 for mp = 1:size(MP,1)
                     PATHFIND.SPATIAL.VESSELS(v).SuitableValidPort_GoalRegister...
                         (MP(mp,1),MP(mp,2)) = 1;
                 end
                 
             case 'Large'                                                    % Vessel requires at least Large Ports.
                 LP = vertcat(PATHFIND.SPATIAL.PORTS(ismember(SCENARIO.Ports.Ports_SizeClassification.Ports_SizeClassification,...
                     {'Large'})).ValidGridPosition_SubscriptIndex_mn);
                 for lp = 1:size(LP,1)
                     PATHFIND.SPATIAL.VESSELS(v).SuitableValidPort_GoalRegister...
                         (LP(lp,1),LP(lp,2)) = 1;
                 end
                 
             otherwise
                 error('Ports_SizeClassification must be specifed as "Small", "Medium" or "Large"!');
         end
        
        % Node Path (Part 1)
        PATHFIND.SPATIAL.VESSELS(v).AStar_Path2SuitableValidPort_mn...        
            = (single(~PATHFIND.MAPS.BinaryMobilityMap));
        PATHFIND.SPATIAL.VESSELS(v).AStar_Path2SuitableValidPort_mn...
            (PATHFIND.MAPS.BinaryMobilityMap == 1)...
            = NaN;

        % A* Distance
        PATHFIND.SPATIAL.VESSELS(v).Path2SuitableValidPort_AStarDistance_m...
            = PATHFIND.SPATIAL.VESSELS(v).AStar_Path2SuitableValidPort_mn;

        % Euclidean Distance
        PATHFIND.SPATIAL.VESSELS(v).Path2SuitableValidPort_EuclidDistance_m...
           = PATHFIND.SPATIAL.VESSELS(v).AStar_Path2SuitableValidPort_mn;

        % Node Path (Part 2)
        PATHFIND.SPATIAL.VESSELS(v).AStar_Path2SuitableValidPort_mn...
            = num2cell(PATHFIND.SPATIAL.VESSELS(v).AStar_Path2SuitableValidPort_mn);
        PATHFIND.SPATIAL.VESSELS(v).AStar_Path2SuitableValidPort_mn...
            (PATHFIND.MAPS.BinaryMobilityMap == 0) = {[]}; 

        % Nearest Valid Suitable Port (Name)
        PATHFIND.SPATIAL.VESSELS(v).NearestSuitableValidPort...
            = PATHFIND.SPATIAL.VESSELS(v).AStar_Path2SuitableValidPort_mn;
    end 
    
    %% A* Algorithm - Transmission
    disp(' - Finding A* shortest node paths from every grid point to nearest landfall for Transmission (this may take some time)...'); 
    Start = tic; b = waitbar(0,'1','Name','Evaluating row number...');      % Start timer.
    for x = 1:size(PATHFIND.MAPS.BinaryMobilityMap,1)                       % For each row...
        waitbar(x/size(PATHFIND.MAPS.BinaryMobilityMap,1), b, sprintf('%5.0f',x));
        for y = 1:size(PATHFIND.MAPS.BinaryMobilityMap,2)                   % For each column...
            if ~PATHFIND.MAPS.BinaryMobilityMap(x,y)...                     % If position is valid (wet)...  
            && ~PATHFIND.MAPS.LandBoundary_GoalRegister(x,y)                % Remove land boundaries (A* will fail if it starts at it's goal)  
                % Node Path
                [PATHFIND.SPATIAL.TRANSMISSION.AStar_OptimalPath2LandFall_mn{x,y}, ~, ~]...
                    = astar2(x, y,...
                            PATHFIND.MAPS.BinaryMobilityMap',...
                            PATHFIND.MAPS.LandBoundary_GoalRegister',...
                            (PATHFIND.MAPS.WeightedMobilityMap .* SCENARIO.Region.Region_Pathfinding.Pathfinding_DepthMobilityWeighting)',...
                            SCENARIO.Region.Region_Pathfinding.Pathfinding_HeuristicWeighting,...
                            SCENARIO.Region.Region_Pathfinding.Pathfinding_ConnectingDistance);
                
                PATHFIND.SPATIAL.TRANSMISSION.AStar_OptimalPath2LandFall_mn{x,y}...
                    = single(PATHFIND.SPATIAL.TRANSMISSION.AStar_OptimalPath2LandFall_mn{x,y});
                
                % Node UTM Positions & Euclidean Distance between Nodes
                [Path2LandFall_UTM_EN_m,...
                 Path2LandFall_NodeDistance_m]...
                    = nodepathdist(PATHFIND.SPATIAL.TRANSMISSION.AStar_OptimalPath2LandFall_mn{x,y},...
                                   METOCEAN.SPATIAL.UTM_E_m,...
                                   METOCEAN.SPATIAL.UTM_N_m,...
                                   SCENARIO.Region.Region_UTM.Region_UTM_Zone(1),...
                                   SCENARIO.Region.Region_UTM.Region_UTM_Hemi{1});

                % AStar Path Distance
                PATHFIND.SPATIAL.TRANSMISSION.Path2LandFall_AStarDistance_m(x,y)...
                    = sum(Path2LandFall_NodeDistance_m)...
                    + GridCellSize/2;
                 
                % Euclidean Distance (for comparison)
                PATHFIND.SPATIAL.TRANSMISSION.Path2LandFall_EuclidDistance_m(x,y)...
                    = (utmeuclideandist(Path2LandFall_UTM_EN_m(1,1),...
                                       Path2LandFall_UTM_EN_m(1,2),...
                                       SCENARIO.Region.Region_UTM.Region_UTM_Zone(1),...
                                       SCENARIO.Region.Region_UTM.Region_UTM_Hemi{1},...
                                       Path2LandFall_UTM_EN_m(end,1),...
                                       Path2LandFall_UTM_EN_m(end,2),...
                                       SCENARIO.Region.Region_UTM.Region_UTM_Zone(1),...
                                       SCENARIO.Region.Region_UTM.Region_UTM_Hemi{1}))...
                                    + GridCellSize/2;
            end
        end
    end
    
    % Stop Timer
    Stop = toc(Start); disp([' - Time Elapsed: ',char(string(round2(Stop/60,0.01))),' minutes.']); close(b); 
    
    % Fill Gaps with Grid Cell Size (structured grid assumed)   
    PATHFIND.SPATIAL.TRANSMISSION.Path2LandFall_AStarDistance_m...
        (PATHFIND.MAPS.LandBoundary_GoalRegister == 1)...
            = GridCellSize/2;
    PATHFIND.SPATIAL.TRANSMISSION.Path2LandFall_EuclidDistance_m...
        (PATHFIND.MAPS.LandBoundary_GoalRegister == 1)...
            = GridCellSize/2;      
    
    %% A* Algorithm - Vessel Specific Operations
    disp(' - Finding A* shortest node paths from every grid point to Ports for Operations (this may take some time)...'); 
    Start = tic; b = waitbar(0,'1','Name','Evaluating row number...');      % Start timer.
    for x = 1:size(PATHFIND.MAPS.BinaryMobilityMap,1)                       % For each row...
        waitbar(x/size(PATHFIND.MAPS.BinaryMobilityMap,1), b, sprintf('%5.0f',x));
        for y = 1:size(PATHFIND.MAPS.BinaryMobilityMap,2)                   % For each column...
            if ~PATHFIND.MAPS.BinaryMobilityMap(x,y)...                     % If position is valid (wet)...  
            && ~PATHFIND.MAPS.ValidPort_GoalRegister(x,y)                   % Remove Port positions (A* will fail if it starts at it's goal)   
                for v = 1:size(SCENARIO.Vessels.Vessels_WorkingLimits,1)    % For each Vessel...
                        % Node Path
                        [PATHFIND.SPATIAL.VESSELS(v).AStar_Path2SuitableValidPort_mn{x,y}, ~, ~]...
                            = astar2(x, y,...
                                     PATHFIND.MAPS.BinaryMobilityMap',...
                                     PATHFIND.SPATIAL.VESSELS(v).SuitableValidPort_GoalRegister',...
                                    (PATHFIND.MAPS.WeightedMobilityMap .* SCENARIO.Region.Region_Pathfinding.Pathfinding_DepthMobilityWeighting)',...
                                     SCENARIO.Region.Region_Pathfinding.Pathfinding_HeuristicWeighting,...
                                     SCENARIO.Region.Region_Pathfinding.Pathfinding_ConnectingDistance);
 
                        PATHFIND.SPATIAL.VESSELS(v).AStar_Path2SuitableValidPort_mn{x,y}...
                            = single(PATHFIND.SPATIAL.VESSELS(v).AStar_Path2SuitableValidPort_mn{x,y});          

                        % Node UTM Positions & Euclidean Distance between Nodes
                       [Path2SuitableValidPort_UTM_EN_m,...
                        Path2SuitableValidPort_NodeDistance_m]...
                            = nodepathdist(PATHFIND.SPATIAL.VESSELS(v).AStar_Path2SuitableValidPort_mn{x,y},...
                                           METOCEAN.SPATIAL.UTM_E_m,...
                                           METOCEAN.SPATIAL.UTM_N_m,...
                                           SCENARIO.Region.Region_UTM.Region_UTM_Zone(1),...
                                           SCENARIO.Region.Region_UTM.Region_UTM_Hemi{1});
                        
                        % AStar Path Distance
                        PATHFIND.SPATIAL.VESSELS(v).Path2SuitableValidPort_AStarDistance_m(x,y)...
                            = sum(Path2SuitableValidPort_NodeDistance_m);

                        % Euclidean Distance (for Comparison)
                        [~,TIdx] = ismember(Path2SuitableValidPort_UTM_EN_m(1,:),...   % Temporary index of Port UTM match.             
                                [[PATHFIND.SPATIAL.PORTS.ValidGridPosition_UTM_E_m]',...
                                 [PATHFIND.SPATIAL.PORTS.ValidGridPosition_UTM_N_m]'],'rows');
 
                        PATHFIND.SPATIAL.VESSELS(v).Path2SuitableValidPort_EuclidDistance_m(x,y)...
                            = utmeuclideandist(Path2SuitableValidPort_UTM_EN_m(1,1),...
                                               Path2SuitableValidPort_UTM_EN_m(1,2),...
                                               SCENARIO.Region.Region_UTM.Region_UTM_Zone(1),...
                                               SCENARIO.Region.Region_UTM.Region_UTM_Hemi{1},...
                                               Path2SuitableValidPort_UTM_EN_m(end,1),...
                                               Path2SuitableValidPort_UTM_EN_m(end,2),...
                                               SCENARIO.Region.Region_UTM.Region_UTM_Zone(1),...
                                               SCENARIO.Region.Region_UTM.Region_UTM_Hemi{1});
                        % Port Name
                        PATHFIND.SPATIAL.VESSELS(v).NearestSuitableValidPort{x,y}...
                            = PATHFIND.SPATIAL.PORTS(TIdx).Ports_Name;
                end
            end
        end
    end
    % Stop Timer
    Stop = toc(Start); disp([' - Time Elapsed: ',char(string(round2(Stop/60,0.01))),' minutes.']); close(b); 

    % Fill Gaps with 0s 
    for v = 1:size(SCENARIO.Vessels.Vessels_WorkingLimits,1)                % For each Vessel...
        PATHFIND.SPATIAL.VESSELS(v).Path2SuitableValidPort_AStarDistance_m...
            (PATHFIND.SPATIAL.VESSELS(v).SuitableValidPort_GoalRegister == 1)...
                = 0;        
        PATHFIND.SPATIAL.VESSELS(v).Path2SuitableValidPort_EuclidDistance_m...
            (PATHFIND.SPATIAL.VESSELS(v).SuitableValidPort_GoalRegister == 1)...
                = 0;   
    end
    
    % Finalise Section
    disp(' - Converting node paths to distances...');
    disp(' % All A* paths from SPATIAL grid points calculated successfully.');
    
end

%% DISCRETE Pathfinding (Sites Specific, A* Algorithm)
if IN.RUN.DISCRETE && IN.RUN.SPATIAL                                        % If SPATIAL bathy data is available for any type of simulation...        
    disp('Calculating A* shortest paths for DISCRETE Sites...');
    PATHFIND.DISCRETE.SITES   = PATHFIND.SPATIAL.SITES;                     % Duplicate SPATIAL Sites.
    PATHFIND.DISCRETE.PORTS   = PATHFIND.SPATIAL.PORTS;                     % Duplicate SPATIAL Port.
    PATHFIND.DISCRETE.VESSELS = PATHFIND.SPATIAL.VESSELS;                   % Duplicate SPATIAL Vessels goal registers.
    PATHFIND.DISCRETE.VESSELS = rmfield(PATHFIND.DISCRETE.VESSELS,...       % Remove
                                {'AStar_Path2SuitableValidPort_mn',...
                                 'Path2SuitableValidPort_AStarDistance_m',...
                                 'Path2SuitableValidPort_EuclidDistance_m',...
                                 'NearestSuitableValidPort'});
    
    %% A* Algorithm Shortest Path
    for s = 1:size(PATHFIND.DISCRETE.SITES,2)
        %% A* Algorithm for Transmission Cabling Distances
        Start = tic; disp(' - Finding A* shortest node paths from Sites to landfall for Transmission...');
        
       [PATHFIND.DISCRETE.SITES(s).TRANSMISSION.AStar_OptimalPath2LandFall_mn,...
        PATHFIND.DISCRETE.SITES(s).TRANSMISSION.AStar_HeuristicMap,...
        PATHFIND.DISCRETE.SITES(s).TRANSMISSION.AStar_MovementCostMap]...
               = astar2(PATHFIND.DISCRETE.SITES(s).ValidGridPosition_SubscriptIndex_mn(1),...
                        PATHFIND.DISCRETE.SITES(s).ValidGridPosition_SubscriptIndex_mn(2),...
                        PATHFIND.MAPS.BinaryMobilityMap',...
                        PATHFIND.MAPS.LandBoundary_GoalRegister',...
                       (PATHFIND.MAPS.WeightedMobilityMap .* SCENARIO.Region.Region_Pathfinding.Pathfinding_DepthMobilityWeighting)',...                     
                        SCENARIO.Region.Region_Pathfinding.Pathfinding_HeuristicWeighting,...
                        SCENARIO.Region.Region_Pathfinding.Pathfinding_ConnectingDistance);
                    
        Stop = toc(Start); disp([' - Time Elapsed: ',char(string(round2(Stop,0.01))),' seconds.']);
        
        %% A* for Vessel Specific Operations Distances 
        Start = tic; disp(' - Finding A* shortest node paths from Site to Port for Operations...');
        
        for v = 1:size(SCENARIO.Vessels.Vessels_WorkingLimits,1)            % For each Vessel...
            PATHFIND.DISCRETE.SITES(s).VESSELS(v).Vessels_Name...           % Extract Vessel name.
                 = SCENARIO.Vessels.Vessels_WorkingLimits.Vessels_Name{v};
             
           [PATHFIND.DISCRETE.SITES(s).VESSELS(v).AStar_Path2SuitableValidPort_mn,...
            PATHFIND.DISCRETE.SITES(s).VESSELS(v).AStar_HeuristicMap,...
            PATHFIND.DISCRETE.SITES(s).VESSELS(v).AStar_MovementCostMap]...
                = astar2(PATHFIND.DISCRETE.SITES(s).ValidGridPosition_SubscriptIndex_mn(1),...
                         PATHFIND.DISCRETE.SITES(s).ValidGridPosition_SubscriptIndex_mn(2),...
                         PATHFIND.MAPS.BinaryMobilityMap',...
                         PATHFIND.DISCRETE.VESSELS(v).SuitableValidPort_GoalRegister',...
                        (PATHFIND.MAPS.WeightedMobilityMap .* SCENARIO.Region.Region_Pathfinding.Pathfinding_DepthMobilityWeighting(1))',...                     
                         SCENARIO.Region.Region_Pathfinding.Pathfinding_HeuristicWeighting(1),...
                         SCENARIO.Region.Region_Pathfinding.Pathfinding_ConnectingDistance(1));    
        end
        
        Stop = toc(Start); disp([' - Time Elapsed: ',char(string(round2(Stop,0.01))),' seconds.']); 
    end
   
    %% Convert Node Paths to Distances
    disp(' - Converting node paths to distances...');    
    for s = 1:size(PATHFIND.DISCRETE.SITES,2)                               % For each Site...  
        %% Transmission Distances
        % Path UTM Positions & Depths
        for n = 1:size(PATHFIND.DISCRETE.SITES(s).TRANSMISSION.AStar_OptimalPath2LandFall_mn,1) % For the number of Nodes on the path...  
            PATHFIND.DISCRETE.SITES(s).TRANSMISSION.Path2LandFall_UTM_EN_m(n,:)...
                = [METOCEAN.SPATIAL.UTM_E_m(PATHFIND.DISCRETE.SITES(s).TRANSMISSION.AStar_OptimalPath2LandFall_mn(n,2),...
                                                      PATHFIND.DISCRETE.SITES(s).TRANSMISSION.AStar_OptimalPath2LandFall_mn(n,1)),...
                   METOCEAN.SPATIAL.UTM_N_m(PATHFIND.DISCRETE.SITES(s).TRANSMISSION.AStar_OptimalPath2LandFall_mn(n,2),...
                                                      PATHFIND.DISCRETE.SITES(s).TRANSMISSION.AStar_OptimalPath2LandFall_mn(n,1))]; 
            
            PATHFIND.DISCRETE.SITES(s).TRANSMISSION.Path2LandFall_Depth_m(n,1)...
                = METOCEAN.SPATIAL.ChartDatum_Z_m(PATHFIND.DISCRETE.SITES(s).TRANSMISSION.AStar_OptimalPath2LandFall_mn(n,2),...
                                                            PATHFIND.DISCRETE.SITES(s).TRANSMISSION.AStar_OptimalPath2LandFall_mn(n,1));
        end

        % Euclidean Distance between Nodes
        PATHFIND.DISCRETE.SITES(s).TRANSMISSION.Path2LandFall_NodeDistance_m(1,:) = 0;
        
        for n = 2:size(PATHFIND.DISCRETE.SITES(s).TRANSMISSION.AStar_OptimalPath2LandFall_mn,1)
            PATHFIND.DISCRETE.SITES(s).TRANSMISSION.Path2LandFall_NodeDistance_m(n,:)...
                = utmeuclideandist(PATHFIND.DISCRETE.SITES(s).TRANSMISSION.Path2LandFall_UTM_EN_m(n-1,1),...
                                   PATHFIND.DISCRETE.SITES(s).TRANSMISSION.Path2LandFall_UTM_EN_m(n-1,2),...
                                   SCENARIO.Region.Region_UTM.Region_UTM_Zone(1),...
                                   SCENARIO.Region.Region_UTM.Region_UTM_Hemi{1},...
                                   PATHFIND.DISCRETE.SITES(s).TRANSMISSION.Path2LandFall_UTM_EN_m(n,1),...
                                   PATHFIND.DISCRETE.SITES(s).TRANSMISSION.Path2LandFall_UTM_EN_m(n,2),...
                                   SCENARIO.Region.Region_UTM.Region_UTM_Zone(1),...
                                   SCENARIO.Region.Region_UTM.Region_UTM_Hemi{1});
        end

        % Grid Cell Size
        PATHFIND.DISCRETE.SITES(s).TRANSMISSION.GridCellSize_m...
            = GridCellSize;
        
        % Transmission A* Path Distance              
        PATHFIND.DISCRETE.SITES(s).TRANSMISSION.Path2LandFall_AStarDistance_m...
            = sum(PATHFIND.DISCRETE.SITES(s).TRANSMISSION.Path2LandFall_NodeDistance_m)...
            + GridCellSize/2;                                               
       
        % Euclidean Distance between first and last nodes (for Comparison)
        PATHFIND.DISCRETE.SITES(s).TRANSMISSION.Path2LandFall_EuclidDistance_m...
            = (utmeuclideandist(PATHFIND.DISCRETE.SITES(s).TRANSMISSION.Path2LandFall_UTM_EN_m(1,1),...
                                PATHFIND.DISCRETE.SITES(s).TRANSMISSION.Path2LandFall_UTM_EN_m(1,2),...
                                SCENARIO.Region.Region_UTM.Region_UTM_Zone(1),...
                                SCENARIO.Region.Region_UTM.Region_UTM_Hemi{1},...
                                PATHFIND.DISCRETE.SITES(s).TRANSMISSION.Path2LandFall_UTM_EN_m(end,1),...
                                PATHFIND.DISCRETE.SITES(s).TRANSMISSION.Path2LandFall_UTM_EN_m(end,2),...
                                SCENARIO.Region.Region_UTM.Region_UTM_Zone(1),...
                                SCENARIO.Region.Region_UTM.Region_UTM_Hemi{1}))...
                              + GridCellSize/2;
        
        %% Operations Distances
        for v = 1:size(PATHFIND.DISCRETE.VESSELS,2)                         % For each Vessel...
            % Vessel Specific Paths UTM Positions & Depths
            for n = 1:size(PATHFIND.DISCRETE.SITES(s).VESSELS(v).AStar_Path2SuitableValidPort_mn,1)   % For the number of Nodes on the path...    
                PATHFIND.DISCRETE.SITES(s).VESSELS(v).Path2SuitableValidPort_UTM_EN_m(n,:)...
                    = [METOCEAN.SPATIAL.UTM_E_m(PATHFIND.DISCRETE.SITES(s).VESSELS(v).AStar_Path2SuitableValidPort_mn(n,2),...
                                                          PATHFIND.DISCRETE.SITES(s).VESSELS(v).AStar_Path2SuitableValidPort_mn(n,1)),...
                       METOCEAN.SPATIAL.UTM_N_m(PATHFIND.DISCRETE.SITES(s).VESSELS(v).AStar_Path2SuitableValidPort_mn(n,2),...
                                                          PATHFIND.DISCRETE.SITES(s).VESSELS(v).AStar_Path2SuitableValidPort_mn(n,1))]; 

                PATHFIND.DISCRETE.SITES(s).VESSELS(v).Path2SuitableValidPort_Depth_m(n,1)...
                    = METOCEAN.SPATIAL.ChartDatum_Z_m(PATHFIND.DISCRETE.SITES(s).VESSELS(v).AStar_Path2SuitableValidPort_mn(n,2),...
                                                                PATHFIND.DISCRETE.SITES(s).VESSELS(v).AStar_Path2SuitableValidPort_mn(n,1));
            end

            % Vessel Specific Euclidean Distance between Nodes
            PATHFIND.DISCRETE.SITES(s).VESSELS(v).Path2SuitableValidPort_NodeDistance_m(1,:) = 0;
            
            for n = 2:size(PATHFIND.DISCRETE.SITES(s).VESSELS(v).AStar_Path2SuitableValidPort_mn,1)   % For the number of Nodes on the path (excluding the first)...  
                PATHFIND.DISCRETE.SITES(s).VESSELS(v).Path2SuitableValidPort_NodeDistance_m(n,:)...
                    = utmeuclideandist(PATHFIND.DISCRETE.SITES(s).VESSELS(v).Path2SuitableValidPort_UTM_EN_m(n-1,1),...
                                       PATHFIND.DISCRETE.SITES(s).VESSELS(v).Path2SuitableValidPort_UTM_EN_m(n-1,2),...
                                       SCENARIO.Region.Region_UTM.Region_UTM_Zone(1),...
                                       SCENARIO.Region.Region_UTM.Region_UTM_Hemi{1},...
                                       PATHFIND.DISCRETE.SITES(s).VESSELS(v).Path2SuitableValidPort_UTM_EN_m(n,1),...
                                       PATHFIND.DISCRETE.SITES(s).VESSELS(v).Path2SuitableValidPort_UTM_EN_m(n,2),...
                                       SCENARIO.Region.Region_UTM.Region_UTM_Zone(1), SCENARIO.Region.Region_UTM.Region_UTM_Hemi{1});
            end

            % Vessel Specific AStar Path Distance              
            PATHFIND.DISCRETE.SITES(s).VESSELS(v).Path2SuitableValidPort_AStarDistance_m...
                = sum(PATHFIND.DISCRETE.SITES(s).VESSELS(v).Path2SuitableValidPort_NodeDistance_m);  
            
            % Closest Vessel Specific Port (A* Path)
            PATHFIND.DISCRETE.SITES(s).VESSELS(v).NearestSuitableValidPort_AStar...
                = PATHFIND.DISCRETE.PORTS([PATHFIND.DISCRETE.PORTS.ValidGridPosition_UTM_E_m] == PATHFIND.DISCRETE.SITES(s).VESSELS(v).Path2SuitableValidPort_UTM_EN_m(1,1)...
                                        & [PATHFIND.DISCRETE.PORTS.ValidGridPosition_UTM_N_m] == PATHFIND.DISCRETE.SITES(s).VESSELS(v).Path2SuitableValidPort_UTM_EN_m(1,2)).Ports_Name;
            
            % Vessel Specific Euclidean Distance (for comparison)
            switch PATHFIND.DISCRETE.VESSELS(v).Vessels_SizeClassification
                case 'Small'                                                % Vessel requires at least Small Ports.
                    SP = ismember(SCENARIO.Ports.Ports_SizeClassification.Ports_SizeClassification,...
                        {'Small','Medium','Large'});
                    [PATHFIND.DISCRETE.SITES(s).VESSELS(v).Path2SuitableValidPort_EuclidDistance_m, SIdx]...
                        = min([SITES(s).PORTS(SP).Site2Port_EuclideanDistance_m]);
                    Temp = {SITES(s).PORTS(SP).Name};
                    PATHFIND.DISCRETE.SITES(s).VESSELS(v).NearestSuitableValidPort_Euclid...
                        = Temp{SIdx};
                    
                case 'Medium'                                               % Vessel requires at least Medium Ports.
                    MP = ismember(SCENARIO.Ports.Ports_SizeClassification.Ports_SizeClassification,...
                        {'Medium','Large'});
                    [PATHFIND.DISCRETE.SITES(s).VESSELS(v).Path2SuitableValidPort_EuclidDistance_m, MIdx]...
                        = min([SITES(s).PORTS(MP).Site2Port_EuclideanDistance_m]);
                    Temp = {SITES(s).PORTS(MP).Name};
                    PATHFIND.DISCRETE.SITES(s).VESSELS(v).NearestSuitableValidPort_Euclid...
                        = Temp{MIdx};
                    
                case 'Large'                                                % Vessel requires at least Large Ports.
                    LP = ismember(SCENARIO.Ports.Ports_SizeClassification.Ports_SizeClassification,...
                        {'Large'});
                    [PATHFIND.DISCRETE.SITES(s).VESSELS(v).Path2SuitableValidPort_EuclidDistance_m, LIdx]...
                        = min([SITES(s).PORTS(LP).Site2Port_EuclideanDistance_m]);
                    Temp = {SITES(s).PORTS(LP).Name};
                    PATHFIND.DISCRETE.SITES(s).VESSELS(v).NearestSuitableValidPort_Euclid...
                        = Temp{LIdx};
                    
                otherwise
                    error('Ports_SizeClassification must be specifed as "Small", "Medium" or "Large"!');
            end
        end
    end
    
    % Finalise Section
    disp(' % All DISCRETE Site to Port distances calculated successfully.'); 
end

end
